// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/bug/ent/predicate"
	"entgo.io/bug/ent/unrenameduser"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UnrenamedUserUpdate is the builder for updating UnrenamedUser entities.
type UnrenamedUserUpdate struct {
	config
	hooks    []Hook
	mutation *UnrenamedUserMutation
}

// Where appends a list predicates to the UnrenamedUserUpdate builder.
func (uuu *UnrenamedUserUpdate) Where(ps ...predicate.UnrenamedUser) *UnrenamedUserUpdate {
	uuu.mutation.Where(ps...)
	return uuu
}

// SetAge sets the "age" field.
func (uuu *UnrenamedUserUpdate) SetAge(i int) *UnrenamedUserUpdate {
	uuu.mutation.ResetAge()
	uuu.mutation.SetAge(i)
	return uuu
}

// AddAge adds i to the "age" field.
func (uuu *UnrenamedUserUpdate) AddAge(i int) *UnrenamedUserUpdate {
	uuu.mutation.AddAge(i)
	return uuu
}

// SetName sets the "name" field.
func (uuu *UnrenamedUserUpdate) SetName(s string) *UnrenamedUserUpdate {
	uuu.mutation.SetName(s)
	return uuu
}

// Mutation returns the UnrenamedUserMutation object of the builder.
func (uuu *UnrenamedUserUpdate) Mutation() *UnrenamedUserMutation {
	return uuu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (uuu *UnrenamedUserUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, uuu.sqlSave, uuu.mutation, uuu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uuu *UnrenamedUserUpdate) SaveX(ctx context.Context) int {
	affected, err := uuu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (uuu *UnrenamedUserUpdate) Exec(ctx context.Context) error {
	_, err := uuu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uuu *UnrenamedUserUpdate) ExecX(ctx context.Context) {
	if err := uuu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (uuu *UnrenamedUserUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(unrenameduser.Table, unrenameduser.Columns, sqlgraph.NewFieldSpec(unrenameduser.FieldID, field.TypeInt))
	if ps := uuu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uuu.mutation.Age(); ok {
		_spec.SetField(unrenameduser.FieldAge, field.TypeInt, value)
	}
	if value, ok := uuu.mutation.AddedAge(); ok {
		_spec.AddField(unrenameduser.FieldAge, field.TypeInt, value)
	}
	if value, ok := uuu.mutation.Name(); ok {
		_spec.SetField(unrenameduser.FieldName, field.TypeString, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, uuu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{unrenameduser.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	uuu.mutation.done = true
	return n, nil
}

// UnrenamedUserUpdateOne is the builder for updating a single UnrenamedUser entity.
type UnrenamedUserUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UnrenamedUserMutation
}

// SetAge sets the "age" field.
func (uuuo *UnrenamedUserUpdateOne) SetAge(i int) *UnrenamedUserUpdateOne {
	uuuo.mutation.ResetAge()
	uuuo.mutation.SetAge(i)
	return uuuo
}

// AddAge adds i to the "age" field.
func (uuuo *UnrenamedUserUpdateOne) AddAge(i int) *UnrenamedUserUpdateOne {
	uuuo.mutation.AddAge(i)
	return uuuo
}

// SetName sets the "name" field.
func (uuuo *UnrenamedUserUpdateOne) SetName(s string) *UnrenamedUserUpdateOne {
	uuuo.mutation.SetName(s)
	return uuuo
}

// Mutation returns the UnrenamedUserMutation object of the builder.
func (uuuo *UnrenamedUserUpdateOne) Mutation() *UnrenamedUserMutation {
	return uuuo.mutation
}

// Where appends a list predicates to the UnrenamedUserUpdate builder.
func (uuuo *UnrenamedUserUpdateOne) Where(ps ...predicate.UnrenamedUser) *UnrenamedUserUpdateOne {
	uuuo.mutation.Where(ps...)
	return uuuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (uuuo *UnrenamedUserUpdateOne) Select(field string, fields ...string) *UnrenamedUserUpdateOne {
	uuuo.fields = append([]string{field}, fields...)
	return uuuo
}

// Save executes the query and returns the updated UnrenamedUser entity.
func (uuuo *UnrenamedUserUpdateOne) Save(ctx context.Context) (*UnrenamedUser, error) {
	return withHooks(ctx, uuuo.sqlSave, uuuo.mutation, uuuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uuuo *UnrenamedUserUpdateOne) SaveX(ctx context.Context) *UnrenamedUser {
	node, err := uuuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (uuuo *UnrenamedUserUpdateOne) Exec(ctx context.Context) error {
	_, err := uuuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uuuo *UnrenamedUserUpdateOne) ExecX(ctx context.Context) {
	if err := uuuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (uuuo *UnrenamedUserUpdateOne) sqlSave(ctx context.Context) (_node *UnrenamedUser, err error) {
	_spec := sqlgraph.NewUpdateSpec(unrenameduser.Table, unrenameduser.Columns, sqlgraph.NewFieldSpec(unrenameduser.FieldID, field.TypeInt))
	id, ok := uuuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "UnrenamedUser.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := uuuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, unrenameduser.FieldID)
		for _, f := range fields {
			if !unrenameduser.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != unrenameduser.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := uuuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uuuo.mutation.Age(); ok {
		_spec.SetField(unrenameduser.FieldAge, field.TypeInt, value)
	}
	if value, ok := uuuo.mutation.AddedAge(); ok {
		_spec.AddField(unrenameduser.FieldAge, field.TypeInt, value)
	}
	if value, ok := uuuo.mutation.Name(); ok {
		_spec.SetField(unrenameduser.FieldName, field.TypeString, value)
	}
	_node = &UnrenamedUser{config: uuuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, uuuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{unrenameduser.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	uuuo.mutation.done = true
	return _node, nil
}
